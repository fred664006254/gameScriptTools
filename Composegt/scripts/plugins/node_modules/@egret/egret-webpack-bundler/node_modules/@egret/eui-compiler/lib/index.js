"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EuiCompiler = exports.emitter = exports.parser = void 0;
var fs = require("fs");
var emitter_1 = require("./emitter");
var eui_config_1 = require("./eui-config");
var parser_1 = require("./util/parser");
var typings_1 = require("./util/typings");
exports.parser = require('./util/parser');
exports.emitter = {
    JavaScriptEmitter: emitter_1.JavaScriptEmitter
};
var EuiCompiler = /** @class */ (function () {
    function EuiCompiler(root) {
        this._transformers = [];
        eui_config_1.initilize(root);
        typings_1.initTypings();
    }
    EuiCompiler.prototype.setCustomTransformers = function (transformers) {
        this._transformers = transformers;
    };
    EuiCompiler.prototype.emit = function () {
        var themes = eui_config_1.getThemes();
        var output = '';
        for (var _i = 0, themes_1 = themes; _i < themes_1.length; _i++) {
            var theme = themes_1[_i];
            output += this.compileTheme(theme.data) + "\n";
        }
        return [
            { filename: 'resource/default.thm.js', content: output }
        ];
    };
    EuiCompiler.prototype.getThemes = function () {
        return eui_config_1.getThemes();
    };
    EuiCompiler.prototype.compileTheme = function (themeData) {
        var exmlFiles = themeData.exmls;
        // const exmlFiles = theme.exmls.map(item => 'resource/' + item) as string[];
        var emitter = new emitter_1.JavaScriptEmitter();
        emitter.emitHeader(themeData);
        for (var _i = 0, exmlFiles_1 = exmlFiles; _i < exmlFiles_1.length; _i++) {
            var filename = exmlFiles_1[_i];
            var fullpath = eui_config_1.getFilePathRelativeProjectRoot(filename);
            var content = fs.readFileSync(fullpath, 'utf-8');
            var skinNode = parser_1.generateAST(content);
            for (var _a = 0, _b = this._transformers; _a < _b.length; _a++) {
                var transformer = _b[_a];
                skinNode = transformer(skinNode);
            }
            emitter.emitSkinNode(filename, skinNode);
        }
        return emitter.getResult();
    };
    EuiCompiler.prototype.compileExml = function (filename, content) {
    };
    return EuiCompiler;
}());
exports.EuiCompiler = EuiCompiler;
