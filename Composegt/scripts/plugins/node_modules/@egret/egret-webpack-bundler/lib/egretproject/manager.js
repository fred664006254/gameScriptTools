"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.manager = void 0;
var data_1 = require("./data");
var manager;
(function (manager) {
    function copyToLibs() {
        // let moduleDir = projectData.getLibraryFolder();
        // FileUtil.remove(moduleDir);
        // projectData.getModulesConfig("web").forEach(m => {
        //     FileUtil.copy(m.sourceDir, projectData.getFilePath(m.targetDir));
        // })
    }
    manager.copyToLibs = copyToLibs;
    function generateManifest(gameFileList, options, manifestPath) {
        var initial = [];
        var game = [];
        data_1.projectData.getModulesConfig(options.platform).forEach(function (m) {
            m.target.forEach(function (m) {
                initial.push(options.debug ? m.debug : m.release);
            });
        });
        if (options.debug) {
            gameFileList.forEach(function (m) {
                game.push("bin-debug/" + m);
            });
        }
        else {
            game.push("main.min.js");
        }
        var manifest = { initial: initial, game: game };
        if (manifestPath) {
            // FileUtil.save(manifestPath, JSON.stringify(manifest, undefined, "\t"));
        }
        else {
            return manifest;
        }
    }
    manager.generateManifest = generateManifest;
    function copyLibsForPublish(target, mode) {
        if (mode === void 0) { mode = 'debug'; }
        var result = [];
        data_1.projectData.getModulesConfig(target).forEach(function (m) {
            m.target.forEach(function (m) {
                var filename = mode == 'debug' ? m.debug : m.release;
                result.push(filename);
            });
        });
        // if (projectData.isWasmProject()) {
        //     let arr = [
        //         "egret.asm.js",
        //         "egret.asm.js.mem",
        //         "egret.webassembly.js",
        //         "egret.webassembly.wasm"
        //     ];
        //     arr.forEach(function (item) {
        //         result.push(FileUtil.joinPath("libs", item));
        //     });
        // }
        return result;
    }
    manager.copyLibsForPublish = copyLibsForPublish;
    function copyManifestForNative(toPath) {
        // let options = egret.args;
        // let manifest = JSON.parse(FileUtil.read(FileUtil.joinPath(options.projectDir, "manifest.json")));
        // let fileLength = manifest.initial.length;
        // for (let i = 0; i < fileLength; i++) {
        //     if (manifest.initial[i].indexOf(".web.") != -1) {
        //         manifest.initial[i] = manifest.initial[i].replace(".web.", ".native.");
        //     }
        // }
        // FileUtil.save(toPath, JSON.stringify(manifest));
    }
    manager.copyManifestForNative = copyManifestForNative;
    function modifyIndex(manifestPath, indexPath) {
        // if (!projectData.useTemplate) {
        //     let manifest = JSON.parse(FileUtil.read(manifestPath, true));
        //     let libs = manifest.initial;
        //     var libsScriptsStr = "";
        //     libs.forEach(m => {
        //         libsScriptsStr += getScript("lib", m);
        //     });
        //     let game = manifest.game;
        //     var gameStr = "";
        //     game.forEach(m => {
        //         gameStr += getScript("lib", m);
        //     });
        //     var reg = /<!--(\s)*modules_files_start(\s)*-->[\s\S]*<!--(\s)*modules_files_end(\s)*-->/;
        //     var replaceStr = '<!--modules_files_start-->\n' + libsScriptsStr + '\t<!--modules_files_end-->';
        //     var htmlContent = FileUtil.read(indexPath, true);
        //     htmlContent = htmlContent.replace(reg, replaceStr);
        //     var reg = /<!--(\s)*game_files_start(\s)*-->[\s\S]*<!--(\s)*game_files_end(\s)*-->/;
        //     var replaceStr = '<!--game_files_start-->\n' + gameStr + '\t<!--game_files_end-->';
        //     htmlContent = htmlContent.replace(reg, replaceStr);
        //     var reg = /<!--(\s)*other_libs_files_start(\s)*-->[\s\S]*<!--(\s)*other_libs_files_end(\s)*-->/;
        //     var replaceStr = '';
        //     htmlContent = htmlContent.replace(reg, replaceStr);
        //     FileUtil.save(indexPath, htmlContent);
        // }
    }
    manager.modifyIndex = modifyIndex;
    function getScript(type, src) {
        switch (type) {
            case 'lib':
                return "\t<script egret=\"" + type + "\" src=\"" + src + "\"></script>\n";
                break;
            case 'game':
                return "\t<script egret=\"" + type + "\" src=\"" + src + "\"></script>\n";
                break;
        }
    }
})(manager = exports.manager || (exports.manager = {}));
