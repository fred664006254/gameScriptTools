"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SrcLoaderPlugn = void 0;
var utils = __importStar(require("../utils"));
var Plugin_1 = __importDefault(require("./Plugin"));
exports.SrcLoaderPlugn = Plugin_1.default;
var NS = Plugin_1.default.NS;
var srcLoader = function (input) {
    var _this = this;
    var content = input.toString();
    var compiler = this._compiler;
    var ns = this[NS];
    var info = ns.factory.get(this.resourcePath);
    // 不在扫描目录下
    // TODO loader配置了include=/src/ 但发现文件改动时libs下的文件也会走过来
    if (!info) {
        return input;
    }
    var defines = info.defines, isModule = info.isModule;
    var isEntry = utils.isEntry(compiler, this.resourcePath);
    var dependencies = [];
    // exml依赖
    // getSkinDependencies(defines, ns.skins).forEach(filePath => {
    // dependencies.push(filePath);
    // });
    if (isEntry) { // 入口文件
        // 导入未模块化的全部文件
        dependencies = dependencies.concat(ns.factory.sortUnmodules());
        // res thm等依赖文件
        // dependencies.splice(0, 0, ...ns.deps);
        // runtime
        // dependencies.unshift(require.resolve('../runtime/bootstrap'));
    }
    var dependenciesRequires = [];
    dependencies.forEach(function (fileName) {
        if (fileName !== _this.resourcePath) {
            var relative = utils.relative(_this.resourcePath, fileName);
            dependenciesRequires.push("require('" + relative + "');");
        }
    });
    var namespaceDeclarations = [];
    var defineAssignments = [];
    var classNameDefines = [];
    Object.keys(defines).forEach(function (name) {
        var info = defines[name];
        // egret强依赖__class__
        if (info.type === 'Class') {
            classNameDefines.push(name + ".prototype['__class__'] = '" + name + "';");
        }
        // 模块化的不自动导出依赖
        if (!isModule && !name.includes('.')) {
            if (info.type === 'Namespace') {
                namespaceDeclarations.push("var " + name + " = window['" + name + "'];");
            }
            defineAssignments.push("window['" + name + "'] = " + name + ";");
        }
    });
    /*
    const hots = [];
  
    // hot update
    if (utils.isHot(compiler)) {
      const exportsClass = [];
      Object.keys(defines).forEach(name => {
        if (defines[name].type === 'Class') {
          exportsClass.push(name);
        }
      });
      // index.ts Main.ts 不支持热更新
      if (!isEntry && !exportsClass.find(name => name === 'Main')) {
        const runtime = utils.relative(this.resourcePath, require.resolve('../runtime/hot'));
        hots.push('if (module.hot && window.Reflect) {'); // must support es6
        hots.push('  module.hot.accept();');
        hots.push(`  var __hot = require('${runtime}');`);
  
        exportsClass.forEach(name => {
          hots.push(`  if (${name}.prototype instanceof egret.DisplayObject) {`);
          hots.push(`    ${name} = __hot(${name}, '${name}')`);
          hots.push('  }');
        });
        hots.push('}');
      }
    }
    */
    var headerPlaceholder = /(^|\n)\s*\/\/\s*HEADER_INJECTION_PLACEHOLDER[^\n]*/;
    var footerPlaceholder = /\n\s*\/\/\s*FOOTER_INJECTION_PLACEHOLDER[^\n]*/;
    if (!headerPlaceholder.test(content)) {
        content = "// HEADER_INJECTION_PLACEHOLDER\n" + content;
    }
    if (!footerPlaceholder.test(content)) {
        content = content + "\n// FOOTER_INJECTION_PLACEHOLDER";
    }
    return content
        .replace(headerPlaceholder, __spreadArrays([
        ''
    ], dependenciesRequires, namespaceDeclarations, [
        '',
    ]).join('\n'))
        .replace(footerPlaceholder, __spreadArrays([
        ''
    ], classNameDefines, defineAssignments, [
        '',
    ]).join('\n'));
};
exports.default = srcLoader;
