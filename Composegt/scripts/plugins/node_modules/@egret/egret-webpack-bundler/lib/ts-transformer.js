"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addDependency = exports.emitClassName = void 0;
var ts = __importStar(require("typescript"));
function emitClassName() {
    return function (ctx) {
        function visitClassDeclaration(node) {
            // const isExport = node.modifiers ? node.modifiers.some((m) => m.kind === ts.SyntaxKind.ExportKeyword) : false;
            var clzNameNode = node.name;
            var clzName = clzNameNode.getText();
            var binaryExpression = ts.createIdentifier("window[\"" + clzName + "\"] = " + clzName + ";");
            var arrays = [
                node,
                binaryExpression,
            ];
            return ts.createNodeArray(arrays);
        }
        function visitor(node) {
            if (node.kind === ts.SyntaxKind.ClassDeclaration) {
                return visitClassDeclaration(node);
            }
            else {
                return ts.visitEachChild(node, visitor, ctx);
            }
        }
        ;
        return function (sf) { return ts.visitNode(sf, visitor); };
    };
}
exports.emitClassName = emitClassName;
function addDependency(moduleName) {
    return function (ctx) {
        function visitClassDeclaration(node) {
            // const isExport = node.modifiers ? node.modifiers.some((m) => m.kind === ts.SyntaxKind.ExportKeyword) : false;
            var binaryExpression = ts.createIdentifier("require(\"" + moduleName + "\")");
            var arrays = [
                binaryExpression,
                node,
            ];
            return ts.createNodeArray(arrays);
        }
        function visitor(node) {
            if (node.kind === ts.SyntaxKind.ClassDeclaration) {
                var clz = node;
                if (clz.name && clz.name.getText() === "Main") {
                    return visitClassDeclaration(node);
                }
                else {
                    return ts.visitEachChild(node, visitor, ctx);
                }
            }
            else {
                return ts.visitEachChild(node, visitor, ctx);
            }
        }
        ;
        function visitor2(node) {
            return ts.visitEachChild(node, visitor, ctx);
        }
        ;
        return function (sf) {
            if (sf.fileName.indexOf("Main.ts") >= 0) {
                return ts.visitNode(sf, visitor);
            }
            else {
                return ts.visitNode(sf, visitor2);
            }
        };
    };
}
exports.addDependency = addDependency;
